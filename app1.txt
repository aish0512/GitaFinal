import React, { useState } from 'react';
import { View, TextInput, TouchableOpacity, Text, StyleSheet, ActivityIndicator, Platform, StatusBar } from 'react-native';
import MaterialIcons from 'react-native-vector-icons/MaterialIcons';
import { GiftedChat } from 'react-native-gifted-chat';

export default function App() {
  const welcomeMessage = {
    _id: 1,
    text: "Greetings, seeker of wisdom. You've entered a realm where ancient knowledge meets modern dilemmas. Inspired by the profound teachings of the Bhagavad Gita, I'm here to help you reflect, understand, and find peace in your answers. What life questions can I assist you with today?",
    createdAt: new Date(),
    user: {
      _id: 2, // Assuming '2' is the ID for the bot
      name: "Gita Bot",
      avatar: require('./assets/logo.png'), // Assuming you have an avatar for the bot
    },
  };
  const [messages, setMessage] = useState([welcomeMessage]); // Renamed for clarity and correctness
  const [inputMessage, setInputMessage] = useState(''); 
  const [showSuggestions, setShowSuggestions] = useState(true);
  const [isLoading, setIsLoading] = useState(false);
  const [chapterVerses, setChapterVerses] = useState([]);


  const sendMessage = async () => {
    setIsLoading(true);
    const message = {
      _id:Math.random().toString(36).substring(7),
      text: inputMessage,
      createdAt: new Date(),
      user: {
        _id: 1, // Make sure this matches the user ID you set in GiftedChat's `user` prop
        avatar:  require("./assets/userlogo.png"), // This should be a valid path or URL
      },
    };
    setMessage((previousMessages)=>
      GiftedChat.append(previousMessages, [message])
    )
    setInputMessage('');
    setShowSuggestions(false);
    
    try {
      const response = await fetch('https://gita-chat-beta2.azurewebsites.net/api/gita_assistant_v1', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ "prompt": inputMessage }),
      });
      const data = await response.json();
      const botMessage = {
        _id: Math.random().toString(36).substring(7),
        text: data.trim(),
        createdAt: new Date(),
        user: { _id: 2, avatar: require('./assets/logo.png') },
      };
      setMessage(previousMessages => GiftedChat.append(previousMessages, [botMessage]));

      const responseText = data; 
      const regex = /Chapter \d+, Verse \d+/g;
      const found = responseText.match(regex) || [];
      setChapterVerses(found);

    } catch (error) {
      console.error("Error fetching data: ", error);
      // Optionally, handle the error in the UI here
    } finally {
      setIsLoading(false);
    }
  };

  const handleSuggestionPress = (suggestion) => {
    setInputMessage(suggestion);
    setShowSuggestions(false);
  };

  const handleReferencePress = (reference) => {
    // Handle the press event, possibly navigate to a detail screen or show more info
    console.log(reference); // Example action
  };
  

  return (
    <View style={styles.container}>
        <GiftedChat
          messages={messages}
          onSend={messages => setMessage(previousMessages => GiftedChat.append(previousMessages, messages))}
          user={{ _id: 1}}
          renderInputToolbar={() => null}
          style={styles.messagesContainer}
        />
        {showSuggestions && (
        <View style={styles.suggestionsContainer}>
          <TouchableOpacity
            onPress={() => handleSuggestionPress("What is the purpose of life?")}
            style={styles.suggestionButton}>
            <Text style={styles.suggestionButtonText}>Purpose of Life</Text>
          </TouchableOpacity>
          <TouchableOpacity
            onPress={() => handleSuggestionPress("How to find peace?")}
            style={styles.suggestionButton}>
            <Text style={styles.suggestionButtonText}>Finding Peace</Text>
          </TouchableOpacity>
        </View>)}
        {chapterVerses.length > 0 && (<View style={styles.chapterContainer}>
          <Text>If you want to know about the verse, please click the below button to know more.</Text>
          {chapterVerses.map((reference, index) => (
            <TouchableOpacity
              key={index}
              onPress={() => handleReferencePress(reference)}
              style={[styles.suggestionButton,{ margin: 5 }]}>
              <Text style={[styles.suggestionButtonText, { textAlign: 'center' }]}>{reference}</Text>
            </TouchableOpacity>
          ))}
        </View>)}
        <View style={styles.inputContainer}>
          <TextInput
            style={styles.input}
            value={inputMessage}
            onChangeText={setInputMessage}
            placeholder="Type a message"
            editable={!isLoading} // Disable input when loading
          />
          {isLoading ? (
            <ActivityIndicator size="small" color="#0000ff" />
          ) : (
            <TouchableOpacity onPress={sendMessage} style={styles.sendButton}>
              <MaterialIcons name="send" size={25} color="white" />
            </TouchableOpacity>
          )}
        </View>
      </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f4ec',
    paddingTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0,
    marginTop: 10,
  },
  messagesContainer: {
    flex: 1,
    justifyContent: "center",
  },
  userMessage: {
    alignSelf: 'flex-end',
    backgroundColor: '#F7D6D0',
    borderRadius: 20,
    padding: 10,
    marginVertical: 5,
  },
  botMessage: {
    flexDirection: 'row', // Align items in a row
    alignItems: 'center', // Center items vertically
    alignSelf: 'flex-start',
    backgroundColor: '#e0e0e0',
    borderRadius: 20,
    padding: 10,
    marginVertical: 5,
  },
  botImage: {
    width: 40, // Adjust the size as needed
    height: 40, // Adjust the size as needed
    marginRight: 10, // Add some spacing between the image and the text
  },  
  messageText: {
    color: 'white',
  },
  inputContainer: {
    flexDirection: 'row',
    padding: 10,
    backgroundColor: '#fff',
  },
  input: {
    flex: 1,
    borderColor: '#ddd',
    borderWidth: 1,
    borderRadius: 20,
    padding: 10,
    backgroundColor: '#fff',
    marginRight: 10,
  },
  sendButton: {
    backgroundColor: 'green',
    borderRadius: 9999,
    padding: 12,
    marginRight: 5,
    marginBottom: 5,
    width: 50,
    height: 50,
    justifyContent: "center"
  },
  sendButtonText: {
    color: '#fff',
  },
  suggestionsContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    paddingBottom: 10,
  },
  suggestionButton: {
    backgroundColor: 'green',
    borderRadius: 20,
    padding: 10,
    marginHorizontal: 10,
  },
  suggestionButtonText: {
    color: '#fff',
  },
  chapterContainer: {
    padding: 10,
    justifyContent: 'center',
  },
});

